// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã
function initializeMap() {
  if (map) {
    map.remove();
  }

  map = L.map('map').setView([50.0, 10.0], 3);

  // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–º–Ω—É—é –∫–∞—Ä—Ç—É
  L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png', {
    maxZoom: 19
  }).addTo(map);

  // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è –≤—Å–µ—Ö —Ç—Ä–µ–∫–æ–≤
  addTrackMarkers();
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤ —Ç—Ä–µ–∫–æ–≤ –Ω–∞ –∫–∞—Ä—Ç—É
function addTrackMarkers() {
  // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–∞—Ä–∫–µ—Ä—ã
  markers.forEach(marker => map.removeLayer(marker));
  markers = [];

  tracks.tracks.forEach(track => {
    if (track.coordinates) {
      console.log(track.id)
      const customIcon = createRedMarker(track);
      // const marker = L.marker([track.coordinates.lat, track.coordinates.lng], { icon: customIcon })
      const marker = L.marker([track.coordinates.lat, track.coordinates.lng])
        .bindPopup(createPopupContent(track))
        .addTo(map);

      markers.push(marker);
    }
  });
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤ —Ç—Ä–µ–∫–æ–≤ –Ω–∞ –∫–∞—Ä—Ç—É
function addTrackMarkersOld() {
  // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–∞—Ä–∫–µ—Ä—ã
  markers.forEach(marker => map.removeLayer(marker));
  markers = [];

  eventsData.forEach(event => {
    if (event.coordinates) {
      // const customIcon = createRedMarker(event);
      const marker = L.marker(event.coordinates, { icon: customIcon })
        .bindPopup(createPopupContent(event))
        .addTo(map);

      markers.push(marker);
    }
  });
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∞—Å–Ω–æ–≥–æ –º–∞—Ä–∫–µ—Ä–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ç—Ä–µ–∫–∞
function createRedMarker(event) {
  // –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é –∏–∫–æ–Ω–∫—É –¥–ª—è –º–∞—Ä–∫–µ—Ä–∞

  const redIcon = L.divIcon({
    className: 'custom-marker',
    html: `
          <div class="marker-container">
              <div class="marker-title">${event.id}</div>
              <div class="marker-pin">üèÅ</div>
          </div>
      `,
    iconSize: [120, 40],
    iconAnchor: [60, 40],
    popupAnchor: [0, -40]
  });

  return redIcon;
}


// –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–æ–ø–∞–ø–∞ –¥–ª—è –º–∞—Ä–∫–µ—Ä–∞
function createPopupContent(event) {
  const currentLang = document.querySelector('.flag-btn.active').getAttribute('data-lang');
  const monthNames = {
    ru: ['–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å', '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'],
    en: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
    fr: ['Janvier', 'F√©vrier', 'Mars', 'Avril', 'Mai', 'Juin', 'Juillet', 'Ao√ªt', 'Septembre', 'Octobre', 'Novembre', 'D√©cembre'],
    es: ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'],
    de: ['Januar', 'Februar', 'M√§rz', 'April', 'Mai', 'Juni', 'Juli', 'August', 'September', 'Oktober', 'November', 'Dezember'],
    it: ['Gennaio', 'Febbraio', 'Marzo', 'Aprile', 'Maggio', 'Giugno', 'Luglio', 'Agosto', 'Settembre', 'Ottobre', 'Novembre', 'Dicembre']
  };

  const eventDate = new Date(event.date);
  const monthName = monthNames[currentLang] ? monthNames[currentLang][eventDate.getMonth()] : monthNames.en[eventDate.getMonth()];

//           <p><strong>${translations[currentLang]?.eventType || translations.en.eventType}:</strong> ${event.event}</p>
//            <p><strong>${translations[currentLang]?.date || translations.en.date}:</strong> ${eventDate.getDate()} ${monthName} ${eventDate.getFullYear()}</p>


  return `
      <div class="popup-content">
          <h3>${event.flag} ${event.id}</h3>
          <p><strong>${translations[currentLang]?.country || translations.en.country}:</strong> ${event.country}</p>
          <a href="${event.website}" target="_blank">${translations[currentLang]?.official_website || translations.en.officialWebsite}</a>
      </div>
  `;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
function updateMapMarkers() {
  return

  const selectedCountry = countryFilter.value;
  const selectedMonth = monthFilter.value;

  // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–∞—Ä–∫–µ—Ä—ã
  markers.forEach(marker => map.removeLayer(marker));
  markers = [];

  // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è
  let filteredEvents = eventsData;
  if (selectedCountry) {
    filteredEvents = filteredEvents.filter(event => event.country === selectedCountry);
  }
  if (selectedMonth) {
    filteredEvents = filteredEvents.filter(event => {
      const eventDate = new Date(event.date);
      return eventDate.getMonth() + 1 === parseInt(selectedMonth);
    });
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
  filteredEvents.forEach(event => {
    if (event.coordinates) {
      const customIcon = createRedMarker(event);
      const marker = L.marker(event.coordinates, { icon: customIcon })
        .bindPopup(createPopupContent(event))
        .addTo(map);

      markers.push(marker);
    }
  });

  // –ï—Å–ª–∏ –µ—Å—Ç—å –º–∞—Ä–∫–µ—Ä—ã, —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –Ω–∞ –Ω–∏—Ö
  if (markers.length > 0) {
    const group = new L.featureGroup(markers);
    map.fitBounds(group.getBounds().pad(0.1));
  }
}