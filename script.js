// –î–∞–Ω–Ω—ã–µ –æ –≥–æ–Ω–æ—á–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –¥–ª—è –∫–∞—Ä—Ç—ã
const eventsData = [
    {
        id: 1,
        date: "2024-05-05",
        track: "Circuit de Barcelona-Catalunya",
        country: "spain",
        countryName: "–ò—Å–ø–∞–Ω–∏—è",
        event: "Formula 1 - –ì—Ä–∞–Ω-–ø—Ä–∏ –ò—Å–ø–∞–Ω–∏–∏",
        description: "–ì–ª–∞–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ —Å–µ–∑–æ–Ω–∞ –§–æ—Ä–º—É–ª—ã-1 –≤ –ò—Å–ø–∞–Ω–∏–∏. –¢—Ä–µ–∫ –∏–∑–≤–µ—Å—Ç–µ–Ω —Å–≤–æ–∏–º–∏ –≤—ã—Å–æ–∫–æ—Å–∫–æ—Ä–æ—Å—Ç–Ω—ã–º–∏ –ø–æ–≤–æ—Ä–æ—Ç–∞–º–∏ –∏ —è–≤–ª—è–µ—Ç—Å—è –æ–¥–Ω–∏–º –∏–∑ —Å–∞–º—ã—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏ —Å–ª–æ–∂–Ω—ã—Ö –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ.",
        website: "https://www.circuitcat.com/en/",
        flag: "üá™üá∏",
        trackImage: "üèÅ",
        coordinates: [41.5703, 2.2611]
    },
    {
        id: 2,
        date: "2024-05-12",
        track: "Circuit Paul Ricard",
        country: "france",
        countryName: "–§—Ä–∞–Ω—Ü–∏—è",
        event: "GT World Challenge Europe",
        description: "–ì–æ–Ω–æ—á–Ω–∞—è —Å–µ—Ä–∏—è GT —Å —É—á–∞—Å—Ç–∏–µ–º –ª—É—á—à–∏—Ö GT –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –ï–≤—Ä–æ–ø—ã. –¢—Ä–µ–∫ –∏–∑–≤–µ—Å—Ç–µ–Ω —Å–≤–æ–∏–º–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –ø–æ–ª–æ—Å–∞–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.",
        website: "https://www.circuitpaulricard.com/",
        flag: "üá´üá∑",
        trackImage: "üèÅ",
        coordinates: [43.2500, 5.8500]
    },
    {
        id: 3,
        date: "2024-05-19",
        track: "N√ºrburgring Nordschleife",
        country: "germany",
        countryName: "–ì–µ—Ä–º–∞–Ω–∏—è",
        event: "24 —á–∞—Å–∞ –ù—é—Ä–±—É—Ä–≥—Ä–∏–Ω–≥–∞",
        description: "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è 24-—á–∞—Å–æ–≤–∞—è –≥–æ–Ω–∫–∞ –Ω–∞ —Å–∞–º–æ–π —Å–ª–æ–∂–Ω–æ–π —Ç—Ä–∞—Å—Å–µ –≤ –º–∏—Ä–µ. –°–µ–≤–µ—Ä–Ω–∞—è –ø–µ—Ç–ª—è –ù—é—Ä–±—É—Ä–≥—Ä–∏–Ω–≥–∞ - –º–µ—á—Ç–∞ –∫–∞–∂–¥–æ–≥–æ –≥–æ–Ω—â–∏–∫–∞.",
        website: "https://www.nuerburgring.de/",
        flag: "üá©üá™",
        trackImage: "üèÅ",
        coordinates: [50.3400, 6.9500]
    },
    {
        id: 4,
        date: "2024-05-26",
        track: "Red Bull Ring",
        country: "austria",
        countryName: "–ê–≤—Å—Ç—Ä–∏—è",
        event: "MotoGP - –ì—Ä–∞–Ω-–ø—Ä–∏ –ê–≤—Å—Ç—Ä–∏–∏",
        description: "–ì–æ–Ω–æ—á–Ω–∞—è —Å–µ—Ä–∏—è MotoGP –Ω–∞ –∂–∏–≤–æ–ø–∏—Å–Ω–æ–º –∞–≤—Å—Ç—Ä–∏–π—Å–∫–æ–º —Ç—Ä–µ–∫–µ –≤ –ê–ª—å–ø–∞—Ö. –í—ã—Å–æ–∫–æ—Å–∫–æ—Ä–æ—Å—Ç–Ω–∞—è —Ç—Ä–∞—Å—Å–∞ —Å –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–º–∏ –≤–∏–¥–∞–º–∏.",
        website: "https://www.redbullring.com/",
        flag: "üá¶üáπ",
        trackImage: "üèÅ",
        coordinates: [47.2197, 14.7647]
    },
    {
        id: 5,
        date: "2024-06-02",
        track: "Automotodrom Brno",
        country: "czech",
        countryName: "–ß–µ—Ö–∏—è",
        event: "MotoGP - –ì—Ä–∞–Ω-–ø—Ä–∏ –ß–µ—Ö–∏–∏",
        description: "–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π —Ç—Ä–µ–∫ –≤ –ë—Ä–Ω–æ, –æ–¥–∏–Ω –∏–∑ —Å–∞–º—ã—Ö –ª—é–±–∏–º—ã—Ö —Å—Ä–µ–¥–∏ –≥–æ–Ω—â–∏–∫–æ–≤ MotoGP –∑–∞ —Å–≤–æ—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å.",
        website: "https://www.automotodrombrno.cz/",
        flag: "üá®üáø",
        trackImage: "üèÅ",
        coordinates: [49.1917, 16.4633]
    },
    {
        id: 6,
        date: "2024-06-09",
        track: "Circuit Zandvoort",
        country: "netherlands",
        countryName: "–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã",
        event: "Formula 1 - –ì—Ä–∞–Ω-–ø—Ä–∏ –ù–∏–¥–µ—Ä–ª–∞–Ω–¥–æ–≤",
        description: "–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –§–æ—Ä–º—É–ª—ã-1 –≤ –ó–∞–Ω–¥–≤–æ—Ä—Ç –ø–æ—Å–ª–µ –¥–æ–ª–≥–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞. –¢—Ä–µ–∫ –∏–∑–≤–µ—Å—Ç–µ–Ω —Å–≤–æ–∏–º–∏ –±–∞–Ω–¥–∏–Ω–≥–∞–º–∏ –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä–æ–π.",
        website: "https://www.circuit-zandvoort.nl/",
        flag: "üá≥üá±",
        trackImage: "üèÅ",
        coordinates: [52.3889, 4.5408]
    },
    {
        id: 7,
        date: "2024-06-16",
        track: "Silverstone Circuit",
        country: "uk",
        countryName: "–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è",
        event: "Formula 1 - –ì—Ä–∞–Ω-–ø—Ä–∏ –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏–∏",
        description: "–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π —Ç—Ä–µ–∫, –≥–¥–µ —Å–æ—Å—Ç–æ—è–ª–∞—Å—å –ø–µ—Ä–≤–∞—è –≥–æ–Ω–∫–∞ –§–æ—Ä–º—É–ª—ã-1 –≤ 1950 –≥–æ–¥—É. –î–æ–º –±—Ä–∏—Ç–∞–Ω—Å–∫–æ–≥–æ –∞–≤—Ç–æ—Å–ø–æ—Ä—Ç–∞.",
        website: "https://www.silverstone.co.uk/",
        flag: "üá¨üáß",
        trackImage: "üèÅ",
        coordinates: [52.0786, -1.0169]
    },
    {
        id: 8,
        date: "2024-06-23",
        track: "Aut√≥dromo Internacional do Algarve",
        country: "portugal",
        countryName: "–ü–æ—Ä—Ç—É–≥–∞–ª–∏—è",
        event: "MotoGP - –ì—Ä–∞–Ω-–ø—Ä–∏ –ü–æ—Ä—Ç—É–≥–∞–ª–∏–∏",
        description: "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç—Ä–µ–∫ –≤ –ü–æ—Ä—Ç–∏–º–∞–æ —Å –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–º–∏ –ø–µ—Ä–µ–ø–∞–¥–∞–º–∏ –≤—ã—Å–æ—Ç –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏ —Å–ª–æ–∂–Ω—ã–º–∏ –ø–æ–≤–æ—Ä–æ—Ç–∞–º–∏.",
        website: "https://www.autodromodoalgarve.com/",
        flag: "üáµüáπ",
        trackImage: "üèÅ",
        coordinates: [37.1311, -8.6417]
    },
    {
        id: 9,
        date: "2024-06-30",
        track: "Circuit de la Sarthe",
        country: "france",
        countryName: "–§—Ä–∞–Ω—Ü–∏—è",
        event: "24 —á–∞—Å–∞ –õ–µ-–ú–∞–Ω–∞",
        description: "–°–∞–º–∞—è –ø—Ä–µ—Å—Ç–∏–∂–Ω–∞—è –≥–æ–Ω–∫–∞ –Ω–∞ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å –≤ –º–∏—Ä–µ. –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è —Ç—Ä–∞—Å—Å–∞, –≥–¥–µ —Å–∫–æ—Ä–æ—Å—Ç—å –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å —Ä–µ—à–∞—é—Ç –≤—Å–µ.",
        website: "https://www.24h-lemans.com/",
        flag: "üá´üá∑",
        trackImage: "üèÅ",
        coordinates: [47.9375, 0.2244]
    },
    {
        id: 10,
        date: "2024-07-07",
        track: "Hockenheimring",
        country: "germany",
        countryName: "–ì–µ—Ä–º–∞–Ω–∏—è",
        event: "DTM - –ù–µ–º–µ—Ü–∫–∏–π —á–µ–º–ø–∏–æ–Ω–∞—Ç",
        description: "–ü–æ–ø—É–ª—è—Ä–Ω–∞—è –Ω–µ–º–µ—Ü–∫–∞—è –≥–æ–Ω–æ—á–Ω–∞—è —Å–µ—Ä–∏—è –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–º —Ç—Ä–µ–∫–µ –•–æ–∫–∫–µ–Ω—Ö–∞–π–º. –í—ã—Å–æ–∫–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–µ –≥–æ–Ω–∫–∏.",
        website: "https://www.hockenheimring.de/",
        flag: "üá©üá™",
        trackImage: "üèÅ",
        coordinates: [49.3278, 8.5656]
    },
    {
        id: 11,
        date: "2024-07-14",
        track: "TT Circuit Assen",
        country: "netherlands",
        countryName: "–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã",
        event: "MotoGP - –ì–æ–ª–ª–∞–Ω–¥—Å–∫–∏–π TT",
        description: "–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è –≥–æ–Ω–∫–∞, –∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞–∫ '–°–æ–±–æ—Ä —Å–∫–æ—Ä–æ—Å—Ç–∏'. –û–¥–∏–Ω –∏–∑ —Å–∞–º—ã—Ö –±—ã—Å—Ç—Ä—ã—Ö —Ç—Ä–µ–∫–æ–≤ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ MotoGP.",
        website: "https://www.ttcircuit.com/",
        flag: "üá≥üá±",
        trackImage: "üèÅ",
        coordinates: [52.9617, 6.5233]
    },
    {
        id: 12,
        date: "2024-07-21",
        track: "Brands Hatch",
        country: "uk",
        countryName: "–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è",
        event: "BTCC - –ë—Ä–∏—Ç–∞–Ω—Å–∫–∏–π —á–µ–º–ø–∏–æ–Ω–∞—Ç",
        description: "–ü–æ–ø—É–ª—è—Ä–Ω–∞—è —Å–µ—Ä–∏—è –∫—É–∑–æ–≤–Ω—ã—Ö –≥–æ–Ω–æ–∫ –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏ —Å–ª–æ–∂–Ω–æ–º —Ç—Ä–µ–∫–µ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –ø–æ–¥—ä–µ–º–æ–≤ –∏ —Å–ø—É—Å–∫–æ–≤.",
        website: "https://www.brandshatch.co.uk/",
        flag: "üá¨üáß",
        trackImage: "üèÅ",
        coordinates: [51.3567, 0.2600]
    },
    {
        id: 13,
        date: "2024-07-28",
        track: "Circuito de Jerez",
        country: "spain",
        countryName: "–ò—Å–ø–∞–Ω–∏—è",
        event: "MotoGP - –ì—Ä–∞–Ω-–ø—Ä–∏ –ò—Å–ø–∞–Ω–∏–∏",
        description: "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ç—Ä–µ–∫ –≤ –•–µ—Ä–µ—Å–µ, –≥–¥–µ —á–∞—Å—Ç–æ –ø—Ä–æ–≤–æ–¥—è—Ç—Å—è —Ç–µ—Å—Ç—ã –∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –≥–æ–Ω–∫–∏ —Å–µ–∑–æ–Ω–∞ MotoGP.",
        website: "https://www.circuitodejerez.com/",
        flag: "üá™üá∏",
        trackImage: "üèÅ",
        coordinates: [36.7083, -6.0333]
    },
    {
        id: 14,
        date: "2024-08-04",
        track: "Sachsenring",
        country: "germany",
        countryName: "–ì–µ—Ä–º–∞–Ω–∏—è",
        event: "MotoGP - –ì—Ä–∞–Ω-–ø—Ä–∏ –ì–µ—Ä–º–∞–Ω–∏–∏",
        description: "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏ —Å–ª–æ–∂–Ω—ã–π —Ç—Ä–µ–∫ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –ª–µ–≤—ã—Ö –ø–æ–≤–æ—Ä–æ—Ç–æ–≤. –õ—é–±–∏–º—ã–π —Ç—Ä–µ–∫ –º–Ω–æ–≥–∏—Ö –≥–æ–Ω—â–∏–∫–æ–≤ MotoGP.",
        website: "https://www.sachsenring.de/",
        flag: "üá©üá™",
        trackImage: "üèÅ",
        coordinates: [50.8167, 12.6833]
    },
    {
        id: 15,
        date: "2024-08-11",
        track: "Salzburgring",
        country: "austria",
        countryName: "–ê–≤—Å—Ç—Ä–∏—è",
        event: "GT Masters Austria",
        description: "–í—ã—Å–æ–∫–æ—Å–∫–æ—Ä–æ—Å—Ç–Ω–æ–π —Ç—Ä–µ–∫ –≤ –∂–∏–≤–æ–ø–∏—Å–Ω—ã—Ö –∞–≤—Å—Ç—Ä–∏–π—Å–∫–∏—Ö –ê–ª—å–ø–∞—Ö. –ü–æ–ø—É–ª—è—Ä–µ–Ω —Å—Ä–µ–¥–∏ GT —Å–µ—Ä–∏–π.",
        website: "https://www.salzburgring.at/",
        flag: "üá¶üáπ",
        trackImage: "üèÅ",
        coordinates: [47.8500, 13.0500]
    }
];

// –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞
let currentDate = new Date();
let currentMonth = currentDate.getMonth();
let currentYear = currentDate.getFullYear();

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–∞—Ä—Ç—ã
let map = null;
let markers = [];

// –≠–ª–µ–º–µ–Ω—Ç—ã DOM
const calendarDays = document.getElementById('calendarDays');
const currentMonthElement = document.getElementById('currentMonth');
const prevMonthBtn = document.getElementById('prevMonth');
const nextMonthBtn = document.getElementById('nextMonth');
const countryFilter = document.getElementById('countryFilter');
const monthFilter = document.getElementById('monthFilter');
const modal = document.getElementById('eventModal');
const eventDetails = document.getElementById('eventDetails');
const closeModal = document.querySelector('.close');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', function() {
    renderCalendar();
    setupEventListeners();
    setupViewToggle();
    setupLanguageFlags();
    initializeMap();
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–ª–∞–≥–æ–≤ —è–∑—ã–∫–æ–≤
function setupLanguageFlags() {
    const flagButtons = document.querySelectorAll('.flag-btn');
    const currentLang = getBrowserLanguage();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ñ–ª–∞–≥
    flagButtons.forEach(btn => {
        if (btn.getAttribute('data-lang') === currentLang) {
            btn.classList.add('active');
        }
        
        btn.addEventListener('click', function() {
            const selectedLang = this.getAttribute('data-lang');
            
            // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö —Ñ–ª–∞–≥–æ–≤
            flagButtons.forEach(flag => flag.classList.remove('active'));
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ñ–ª–∞–≥—É
            this.classList.add('active');
            
            // –ü–µ—Ä–µ–≤–æ–¥–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            translateInterface(selectedLang);
            
            // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å –Ω–æ–≤—ã–º —è–∑—ã–∫–æ–º
            renderCalendar();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—É
            if (map) {
                updateMapMarkers();
            }
        });
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã
function initializeMap() {
    if (map) {
        map.remove();
    }
    
    map = L.map('map').setView([50.0, 10.0], 5);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–º–Ω—É—é –∫–∞—Ä—Ç—É
    L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png', {
        attribution: '¬©OpenStreetMap, ¬©CartoDB',
        subdomains: 'abcd',
        maxZoom: 19
    }).addTo(map);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è –≤—Å–µ—Ö —Ç—Ä–µ–∫–æ–≤
    addTrackMarkers();
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤ —Ç—Ä–µ–∫–æ–≤ –Ω–∞ –∫–∞—Ä—Ç—É
function addTrackMarkers() {
    // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–∞—Ä–∫–µ—Ä—ã
    markers.forEach(marker => map.removeLayer(marker));
    markers = [];
    
    eventsData.forEach(event => {
        if (event.coordinates) {
            const marker = L.marker(event.coordinates)
                .bindPopup(createPopupContent(event))
                .addTo(map);
            
            markers.push(marker);
        }
    });
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–æ–ø–∞–ø–∞ –¥–ª—è –º–∞—Ä–∫–µ—Ä–∞
function createPopupContent(event) {
    const currentLang = document.querySelector('.flag-btn.active').getAttribute('data-lang');
    const monthNames = {
        ru: ['–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å', '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'],
        en: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
        fr: ['Janvier', 'F√©vrier', 'Mars', 'Avril', 'Mai', 'Juin', 'Juillet', 'Ao√ªt', 'Septembre', 'Octobre', 'Novembre', 'D√©cembre'],
        es: ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'],
        de: ['Januar', 'Februar', 'M√§rz', 'April', 'Mai', 'Juni', 'Juli', 'August', 'September', 'Oktober', 'November', 'Dezember'],
        it: ['Gennaio', 'Febbraio', 'Marzo', 'Aprile', 'Maggio', 'Giugno', 'Luglio', 'Agosto', 'Settembre', 'Ottobre', 'Novembre', 'Dicembre']
    };
    
    const eventDate = new Date(event.date);
    const monthName = monthNames[currentLang] ? monthNames[currentLang][eventDate.getMonth()] : monthNames.ru[eventDate.getMonth()];
    
    return `
        <div class="popup-content">
            <h3>${event.flag} ${event.track}</h3>
            <p><strong>${translations[currentLang]?.eventType || 'Event type'}:</strong> ${event.event}</p>
            <p><strong>${translations[currentLang]?.date || 'Date'}:</strong> ${eventDate.getDate()} ${monthName} ${eventDate.getFullYear()}</p>
            <p><strong>${translations[currentLang]?.country || 'Country'}:</strong> ${event.countryName}</p>
            <a href="${event.website}" target="_blank">${translations[currentLang]?.officialWebsite || 'Official website'}</a>
        </div>
    `;
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
    prevMonthBtn.addEventListener('click', () => {
        currentMonth--;
        if (currentMonth < 0) {
            currentMonth = 11;
            currentYear--;
        }
        renderCalendar();
    });

    nextMonthBtn.addEventListener('click', () => {
        currentMonth++;
        if (currentMonth > 11) {
            currentMonth = 0;
            currentYear++;
        }
        renderCalendar();
    });

    countryFilter.addEventListener('change', () => {
        renderCalendar();
        updateMapMarkers();
    });
    
    monthFilter.addEventListener('change', () => {
        renderCalendar();
        updateMapMarkers();
    });

    closeModal.addEventListener('click', () => {
        modal.style.display = 'none';
    });

    window.addEventListener('click', (e) => {
        if (e.target === modal) {
            modal.style.display = 'none';
        }
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
function updateMapMarkers() {
    const selectedCountry = countryFilter.value;
    const selectedMonth = monthFilter.value;
    
    // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–∞—Ä–∫–µ—Ä—ã
    markers.forEach(marker => map.removeLayer(marker));
    markers = [];
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è
    let filteredEvents = eventsData;
    if (selectedCountry) {
        filteredEvents = filteredEvents.filter(event => event.country === selectedCountry);
    }
    if (selectedMonth) {
        filteredEvents = filteredEvents.filter(event => {
            const eventDate = new Date(event.date);
            return eventDate.getMonth() + 1 === parseInt(selectedMonth);
        });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
    filteredEvents.forEach(event => {
        if (event.coordinates) {
            const marker = L.marker(event.coordinates)
                .bindPopup(createPopupContent(event))
                .addTo(map);
            
            markers.push(marker);
        }
    });
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –º–∞—Ä–∫–µ—Ä—ã, —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –Ω–∞ –Ω–∏—Ö
    if (markers.length > 0) {
        const group = new L.featureGroup(markers);
        map.fitBounds(group.getBounds().pad(0.1));
    }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–æ–≤
function setupViewToggle() {
    const viewButtons = document.querySelectorAll('.view-toggle button');
    const views = document.querySelectorAll('.view');

    viewButtons.forEach(button => {
        button.addEventListener('click', () => {
            const targetView = button.getAttribute('data-view');
            
            // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –∏ –≤–∏–¥–æ–≤
            viewButtons.forEach(btn => btn.classList.remove('active'));
            views.forEach(view => view.classList.remove('active'));
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–µ –∏ –≤–∏–¥—É
            button.classList.add('active');
            document.getElementById(targetView + 'View').classList.add('active');
            
            // –ï—Å–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –∫–∞—Ä—Ç—É, –æ–±–Ω–æ–≤–ª—è–µ–º –µ—ë —Ä–∞–∑–º–µ—Ä
            if (targetView === 'map' && map) {
                setTimeout(() => {
                    map.invalidateSize();
                    updateMapMarkers();
                }, 100);
            }
        });
    });
}

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
function renderCalendar() {
    const firstDay = new Date(currentYear, currentMonth, 1);
    const lastDay = new Date(currentYear, currentMonth + 1, 0);
    const startDate = new Date(firstDay);
    startDate.setDate(startDate.getDate() - firstDay.getDay() + 1);
    
    const currentLang = document.querySelector('.flag-btn.active').getAttribute('data-lang');
    const monthNames = {
        ru: ['–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å', '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'],
        en: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
        fr: ['Janvier', 'F√©vrier', 'Mars', 'Avril', 'Mai', 'Juin', 'Juillet', 'Ao√ªt', 'Septembre', 'Octobre', 'Novembre', 'D√©cembre'],
        es: ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'],
        de: ['Januar', 'Februar', 'M√§rz', 'April', 'Mai', 'Juni', 'Juli', 'August', 'September', 'Oktober', 'November', 'Dezember'],
        it: ['Gennaio', 'Febbraio', 'Marzo', 'Aprile', 'Maggio', 'Giugno', 'Luglio', 'Agosto', 'Settembre', 'Ottobre', 'Novembre', 'Dicembre']
    };
    
    currentMonthElement.textContent = `${monthNames[currentLang] ? monthNames[currentLang][currentMonth] : monthNames.ru[currentMonth]} ${currentYear}`;
    
    calendarDays.innerHTML = '';
    
    const selectedCountry = countryFilter.value;
    const selectedMonth = monthFilter.value;
    
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π
    let filteredEvents = eventsData;
    if (selectedCountry) {
        filteredEvents = filteredEvents.filter(event => event.country === selectedCountry);
    }
    if (selectedMonth) {
        filteredEvents = filteredEvents.filter(event => {
            const eventDate = new Date(event.date);
            return eventDate.getMonth() + 1 === parseInt(selectedMonth);
        });
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –¥–Ω–µ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    for (let i = 0; i < 42; i++) {
        const date = new Date(startDate);
        date.setDate(startDate.getDate() + i);
        
        const dayElement = document.createElement('div');
        dayElement.className = 'calendar-day';
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –¥–µ–Ω—å —Ç–µ–∫—É—â–µ–º—É –º–µ—Å—è—Ü—É
        if (date.getMonth() !== currentMonth) {
            dayElement.classList.add('other-month');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–µ–Ω—å —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–º
        const today = new Date();
        if (date.toDateString() === today.toDateString()) {
            dayElement.classList.add('today');
        }
        
        const dayNumber = document.createElement('div');
        dayNumber.className = 'calendar-day-number';
        dayNumber.textContent = date.getDate();
        dayElement.appendChild(dayNumber);
        
        // –ü–æ–∏—Å–∫ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è
        const dayEvents = filteredEvents.filter(event => {
            const eventDate = new Date(event.date);
            return eventDate.toDateString() === date.toDateString();
        });
        
        if (dayEvents.length > 0) {
            const eventsContainer = document.createElement('div');
            eventsContainer.className = 'calendar-events';
            
            dayEvents.forEach(event => {
                const eventElement = document.createElement('div');
                eventElement.className = 'event-item';
                eventElement.innerHTML = `
                    <span class="event-flag">${event.flag}</span>
                    <span class="event-track-img">${event.trackImage}</span>
                    <span>${event.event.split(' - ')[1] || event.event}</span>
                `;
                eventElement.addEventListener('click', () => showEventDetails(event));
                eventsContainer.appendChild(eventElement);
            });
            
            dayElement.appendChild(eventsContainer);
        }
        
        calendarDays.appendChild(dayElement);
    }
}

// –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π —Å–æ–±—ã—Ç–∏—è
function showEventDetails(event) {
    const currentLang = document.querySelector('.flag-btn.active').getAttribute('data-lang');
    const monthNames = {
        ru: ['–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å', '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'],
        en: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
        fr: ['Janvier', 'F√©vrier', 'Mars', 'Avril', 'Mai', 'Juin', 'Juillet', 'Ao√ªt', 'Septembre', 'Octobre', 'Novembre', 'D√©cembre'],
        es: ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'],
        de: ['Januar', 'Februar', 'M√§rz', 'April', 'Mai', 'Juni', 'Juli', 'August', 'September', 'Oktober', 'November', 'Dezember'],
        it: ['Gennaio', 'Febbraio', 'Marzo', 'Aprile', 'Maggio', 'Giugno', 'Luglio', 'Agosto', 'Settembre', 'Ottobre', 'Novembre', 'Dicembre']
    };
    
    const eventDate = new Date(event.date);
    const monthName = monthNames[currentLang] ? monthNames[currentLang][eventDate.getMonth()] : monthNames.ru[eventDate.getMonth()];
    
    eventDetails.innerHTML = `
        <div class="event-detail">
            <h3>${event.event}</h3>
            <div class="event-info">
                <div class="event-info-item">
                    <strong>${translations[currentLang]?.track || 'Track'}:</strong>
                    ${event.track}
                </div>
                <div class="event-info-item">
                    <strong>${translations[currentLang]?.country || 'Country'}:</strong>
                    ${event.flag} ${event.countryName}
                </div>
                <div class="event-info-item">
                    <strong>${translations[currentLang]?.date || 'Date'}:</strong>
                    ${eventDate.getDate()} ${monthName} ${eventDate.getFullYear()}
                </div>
                <div class="event-info-item">
                    <strong>${translations[currentLang]?.eventType || 'Event type'}:</strong>
                    ${event.event.split(' - ')[0]}
                </div>
            </div>
            <div class="event-description">
                <strong>${translations[currentLang]?.description || 'Description'}:</strong><br>
                ${event.description}
            </div>
            <div class="event-links">
                <a href="${event.website}" target="_blank">
                    <i class="fas fa-external-link-alt"></i>
                    ${translations[currentLang]?.officialWebsite || 'Official website'}
                </a>
                <a href="#" onclick="searchEvent('${event.event}')">
                    <i class="fas fa-search"></i>
                    ${translations[currentLang]?.searchInfo || 'Search information'}
                </a>
            </div>
        </div>
    `;
    
    modal.style.display = 'block';
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏—è
function searchEvent(eventName) {
    const searchQuery = encodeURIComponent(eventName + ' 2024');
    window.open(`https://www.google.com/search?q=${searchQuery}`, '_blank');
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ JSON (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
function exportEventsToJSON() {
    const jsonData = JSON.stringify(eventsData, null, 2);
    const blob = new Blob([jsonData], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'racing_events_2024.json';
    a.click();
    URL.revokeObjectURL(url);
}

// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
console.log('–î–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –≤ JSON –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: exportEventsToJSON()'); 